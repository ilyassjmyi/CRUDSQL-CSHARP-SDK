/*
 * CrudSQL API
 *
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models CrudSQL provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: taqi@mobix.biz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDynamicApiSync : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Update multiple entities
        /// </summary>
        /// <remarks>
        /// Update multiple entities that match the provided query expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> ModelFilterPut(string model, QueryEntityWithRelations entity, QueryQueryFilter filter, int operationIndex = 0);

        /// <summary>
        /// Update multiple entities
        /// </summary>
        /// <remarks>
        /// Update multiple entities that match the provided query expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> ModelFilterPutWithHttpInfo(string model, QueryEntityWithRelations entity, QueryQueryFilter filter, int operationIndex = 0);
        /// <summary>
        /// Delete multiple entities
        /// </summary>
        /// <remarks>
        /// Delete multiple entities that match the provided query expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        Dictionary<string, Object> ModelFilterDelete(string model, QueryQueryFilter filter, int operationIndex = 0);

        /// <summary>
        /// Delete multiple entities
        /// </summary>
        /// <remarks>
        /// Delete multiple entities that match the provided query expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        ApiResponse<Dictionary<string, Object>> ModelFilterDeleteWithHttpInfo(string model, QueryQueryFilter filter, int operationIndex = 0);

        /// <summary>
        /// Filter entities
        /// </summary>
        /// <remarks>
        /// Filter entities using complex conditions including field expressions, logical operations, and relationship filtering
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="pageSize">Items per page (optional, default to 10)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc,age:desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        QueryFilterResponse GetWhere(string model, QueryQueryFilter filter, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0);

        /// <summary>
        /// Filter entities
        /// </summary>
        /// <remarks>
        /// Filter entities using complex conditions including field expressions, logical operations, and relationship filtering
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="pageSize">Items per page (optional, default to 10)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc,age:desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        ApiResponse<QueryFilterResponse> ModelFilterPostWithHttpInfo(string model, QueryQueryFilter filter, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0);
        /// <summary>
        /// List and filter entities
        /// </summary>
        /// <remarks>
        /// Get a list of entities. Use query parameters for simple filtering or POST to /filter for complex conditions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Items per page (optional)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        QueryFilterResponse GetAll(string model, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0);

        /// <summary>
        /// List and filter entities
        /// </summary>
        /// <remarks>
        /// Get a list of entities. Use query parameters for simple filtering or POST to /filter for complex conditions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Items per page (optional)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        ApiResponse<QueryFilterResponse> ModelGetWithHttpInfo(string model, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete an entity
        /// </summary>
        /// <remarks>
        /// Delete an entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiErrorResponse</returns>
        ApiErrorResponse DeleteById(string model, string id, int operationIndex = 0);

        /// <summary>
        /// Delete an entity
        /// </summary>
        /// <remarks>
        /// Delete an entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiErrorResponse</returns>
        ApiResponse<ApiErrorResponse> ModelIdDeleteWithHttpInfo(string model, string id, int operationIndex = 0);
        /// <summary>
        /// Get an entity by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a single entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        QueryFilterResponse GetById(string model, string id, int operationIndex = 0);

        /// <summary>
        /// Get an entity by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a single entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        ApiResponse<QueryFilterResponse> ModelIdGetWithHttpInfo(string model, string id, int operationIndex = 0);
        /// <summary>
        /// Update an entity
        /// </summary>
        /// <remarks>
        /// Update an existing entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        QueryFilterResponse UpdateById(string model, string id, QueryEntityWithRelations entity, int operationIndex = 0);

        /// <summary>
        /// Update an entity
        /// </summary>
        /// <remarks>
        /// Update an existing entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        ApiResponse<QueryFilterResponse> ModelIdPutWithHttpInfo(string model, string id, QueryEntityWithRelations entity, int operationIndex = 0);
        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <remarks>
        /// Create a new entity of the specified model type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        QueryFilterResponse Create(string model, QueryEntityWithRelations entity, int operationIndex = 0);

        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <remarks>
        /// Create a new entity of the specified model type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        ApiResponse<QueryFilterResponse> ModelPostWithHttpInfo(string model, QueryEntityWithRelations entity, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDynamicApiAsync : IApiAccessor
    {
        #region Asynchronous Operations



        /// Update multiple entities
        /// </summary>
        /// <remarks>
        /// Update multiple entities that match the provided query expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> ModelFilterPutAsync(string model, QueryEntityWithRelations entity, QueryQueryFilter filter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update multiple entities
        /// </summary>
        /// <remarks>
        /// Update multiple entities that match the provided query expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ModelFilterPutWithHttpInfoAsync(string model, QueryEntityWithRelations entity, QueryQueryFilter filter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete multiple entities
        /// </summary>
        /// <remarks>
        /// Delete multiple entities that match the provided query expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Object>> ModelFilterDeleteAsync(string model, QueryQueryFilter filter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete multiple entities
        /// </summary>
        /// <remarks>
        /// Delete multiple entities that match the provided query expression
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Object>>> ModelFilterDeleteWithHttpInfoAsync(string model, QueryQueryFilter filter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Filter entities
        /// </summary>
        /// <remarks>
        /// Filter entities using complex conditions including field expressions, logical operations, and relationship filtering
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="pageSize">Items per page (optional, default to 10)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc,age:desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        System.Threading.Tasks.Task<QueryFilterResponse> ModelFilterPostAsync(string model, QueryQueryFilter filter, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Filter entities
        /// </summary>
        /// <remarks>
        /// Filter entities using complex conditions including field expressions, logical operations, and relationship filtering
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="pageSize">Items per page (optional, default to 10)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc,age:desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryFilterResponse>> ModelFilterPostWithHttpInfoAsync(string model, QueryQueryFilter filter, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List and filter entities
        /// </summary>
        /// <remarks>
        /// Get a list of entities. Use query parameters for simple filtering or POST to /filter for complex conditions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Items per page (optional)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        System.Threading.Tasks.Task<QueryFilterResponse> ModelGetAsync(string model, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List and filter entities
        /// </summary>
        /// <remarks>
        /// Get a list of entities. Use query parameters for simple filtering or POST to /filter for complex conditions
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Items per page (optional)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryFilterResponse>> ModelGetWithHttpInfoAsync(string model, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete an entity
        /// </summary>
        /// <remarks>
        /// Delete an entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiErrorResponse</returns>
        System.Threading.Tasks.Task<ApiErrorResponse> ModelIdDeleteAsync(string model, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete an entity
        /// </summary>
        /// <remarks>
        /// Delete an entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiErrorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiErrorResponse>> ModelIdDeleteWithHttpInfoAsync(string model, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get an entity by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a single entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        System.Threading.Tasks.Task<QueryFilterResponse> ModelIdGetAsync(string model, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get an entity by ID
        /// </summary>
        /// <remarks>
        /// Retrieve a single entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryFilterResponse>> ModelIdGetWithHttpInfoAsync(string model, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an entity
        /// </summary>
        /// <remarks>
        /// Update an existing entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        System.Threading.Tasks.Task<QueryFilterResponse> ModelIdPutAsync(string model, string id, QueryEntityWithRelations entity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an entity
        /// </summary>
        /// <remarks>
        /// Update an existing entity by its ID
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryFilterResponse>> ModelIdPutWithHttpInfoAsync(string model, string id, QueryEntityWithRelations entity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <remarks>
        /// Create a new entity of the specified model type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        System.Threading.Tasks.Task<QueryFilterResponse> ModelPostAsync(string model, QueryEntityWithRelations entity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create a new entity
        /// </summary>
        /// <remarks>
        /// Create a new entity of the specified model type
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryFilterResponse>> ModelPostWithHttpInfoAsync(string model, QueryEntityWithRelations entity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDynamicApi : IDynamicApiSync, IDynamicApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DynamicApi : IDynamicApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DynamicApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DynamicApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DynamicApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DynamicApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DynamicApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Update multiple entities Update multiple entities that match the provided query expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> UpdateWhere(string model, QueryEntityWithRelations entity, QueryQueryFilter filter, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = ModelFilterPutWithHttpInfo(model, entity, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update multiple entities Update multiple entities that match the provided query expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> ModelFilterPutWithHttpInfo(string model, QueryEntityWithRelations entity, QueryQueryFilter filter, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelFilterPut");
            }

            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entity' when calling DynamicApi->ModelFilterPut");
            }

            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DynamicApi->ModelFilterPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = entity;

            localVarRequestOptions.Operation = "DynamicApi.ModelFilterPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Dictionary<string, Object>>("/{model}/filter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelFilterPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update multiple entities Update multiple entities that match the provided query expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> ModelFilterPutAsync(string model, QueryEntityWithRelations entity, QueryQueryFilter filter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = await ModelFilterPutWithHttpInfoAsync(model, entity, filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update multiple entities Update multiple entities that match the provided query expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>>> ModelFilterPutWithHttpInfoAsync(string model, QueryEntityWithRelations entity, QueryQueryFilter filter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelFilterPut");
            }

            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entity' when calling DynamicApi->ModelFilterPut");
            }

            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DynamicApi->ModelFilterPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = new Dictionary<string, object>
            {
                { "MainEntity", entity.MainEntity },
                { "Relations", entity.Relations },
                { "expressions", filter.Expressions }
            };

            localVarRequestOptions.Operation = "DynamicApi.ModelFilterPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Dictionary<string, Object>>("/{model}/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelFilterPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }





        /// <summary>
        /// Delete multiple entities Delete multiple entities that match the provided query expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Dictionary&lt;string, Object&gt;</returns>
        public Dictionary<string, Object> DeleteWhere(string model, QueryQueryFilter filter, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = ModelFilterDeleteWithHttpInfo(model, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple entities Delete multiple entities that match the provided query expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Dictionary&lt;string, Object&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> ModelFilterDeleteWithHttpInfo(string model, QueryQueryFilter filter, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelFilterDelete");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DynamicApi->ModelFilterDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = filter;

            localVarRequestOptions.Operation = "DynamicApi.ModelFilterDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Dictionary<string, Object>>("/{model}/filter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelFilterDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete multiple entities Delete multiple entities that match the provided query expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Dictionary&lt;string, Object&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Object>> ModelFilterDeleteAsync(string model, QueryQueryFilter filter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>> localVarResponse = await ModelFilterDeleteWithHttpInfoAsync(model, filter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete multiple entities Delete multiple entities that match the provided query expression
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Object&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Dictionary<string, Object>>> ModelFilterDeleteWithHttpInfoAsync(string model, QueryQueryFilter filter, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelFilterDelete");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DynamicApi->ModelFilterDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = filter;

            localVarRequestOptions.Operation = "DynamicApi.ModelFilterDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Dictionary<string, Object>>("/{model}/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelFilterDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter entities Filter entities using complex conditions including field expressions, logical operations, and relationship filtering
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="pageSize">Items per page (optional, default to 10)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc,age:desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        public QueryFilterResponse GetWhere(string model, QueryQueryFilter filter, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = ModelFilterPostWithHttpInfo(model, filter, page, pageSize, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter entities Filter entities using complex conditions including field expressions, logical operations, and relationship filtering
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="pageSize">Items per page (optional, default to 10)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc,age:desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> ModelFilterPostWithHttpInfo(string model, QueryQueryFilter filter, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelFilterPost");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DynamicApi->ModelFilterPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.Data = filter;

            localVarRequestOptions.Operation = "DynamicApi.ModelFilterPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<QueryFilterResponse>("/{model}/filter", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelFilterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Filter entities Filter entities using complex conditions including field expressions, logical operations, and relationship filtering
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="pageSize">Items per page (optional, default to 10)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc,age:desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        public async System.Threading.Tasks.Task<QueryFilterResponse> ModelFilterPostAsync(string model, QueryQueryFilter filter, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = await ModelFilterPostWithHttpInfoAsync(model, filter, page, pageSize, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Filter entities Filter entities using complex conditions including field expressions, logical operations, and relationship filtering
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model name</param>
        /// <param name="filter">Filter conditions</param>
        /// <param name="page">Page number (optional, default to 1)</param>
        /// <param name="pageSize">Items per page (optional, default to 10)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc,age:desc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse>> ModelFilterPostWithHttpInfoAsync(string model, QueryQueryFilter filter, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelFilterPost");
            }

            // verify the required parameter 'filter' is set
            if (filter == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'filter' when calling DynamicApi->ModelFilterPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            localVarRequestOptions.Data = filter;

            localVarRequestOptions.Operation = "DynamicApi.ModelFilterPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueryFilterResponse>("/{model}/filter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelFilterPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List and filter entities Get a list of entities. Use query parameters for simple filtering or POST to /filter for complex conditions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Items per page (optional)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        public QueryFilterResponse GetAll(string model, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = ModelGetWithHttpInfo(model, page, pageSize, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List and filter entities Get a list of entities. Use query parameters for simple filtering or POST to /filter for complex conditions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Items per page (optional)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> ModelGetWithHttpInfo(string model, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "DynamicApi.ModelGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<QueryFilterResponse>("/{model}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List and filter entities Get a list of entities. Use query parameters for simple filtering or POST to /filter for complex conditions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Items per page (optional)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        public async System.Threading.Tasks.Task<QueryFilterResponse> ModelGetAsync(string model, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = await ModelGetWithHttpInfoAsync(model, page, pageSize, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List and filter entities Get a list of entities. Use query parameters for simple filtering or POST to /filter for complex conditions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="page">Page number (optional)</param>
        /// <param name="pageSize">Items per page (optional)</param>
        /// <param name="sort">Sort field and direction (e.g., name:asc) (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse>> ModelGetWithHttpInfoAsync(string model, int? page = default(int?), int? pageSize = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "DynamicApi.ModelGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QueryFilterResponse>("/{model}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an entity Delete an entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiErrorResponse</returns>
        public ApiErrorResponse DeleteById(string model, string id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ApiErrorResponse> localVarResponse = ModelIdDeleteWithHttpInfo(model, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an entity Delete an entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ApiErrorResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<ApiErrorResponse> ModelIdDeleteWithHttpInfo(string model, string id, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelIdDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling DynamicApi->ModelIdDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DynamicApi.ModelIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<ApiErrorResponse>("/{model}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an entity Delete an entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiErrorResponse</returns>
        public async System.Threading.Tasks.Task<ApiErrorResponse> ModelIdDeleteAsync(string model, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ApiErrorResponse> localVarResponse = await ModelIdDeleteWithHttpInfoAsync(model, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an entity Delete an entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ApiErrorResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ApiErrorResponse>> ModelIdDeleteWithHttpInfoAsync(string model, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelIdDelete");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling DynamicApi->ModelIdDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DynamicApi.ModelIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ApiErrorResponse>("/{model}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an entity by ID Retrieve a single entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        public QueryFilterResponse GetById(string model, string id, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = ModelIdGetWithHttpInfo(model, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an entity by ID Retrieve a single entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> ModelIdGetWithHttpInfo(string model, string id, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelIdGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling DynamicApi->ModelIdGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DynamicApi.ModelIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<QueryFilterResponse>("/{model}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an entity by ID Retrieve a single entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        public async System.Threading.Tasks.Task<QueryFilterResponse> ModelIdGetAsync(string model, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = await ModelIdGetWithHttpInfoAsync(model, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an entity by ID Retrieve a single entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse>> ModelIdGetWithHttpInfoAsync(string model, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelIdGet");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling DynamicApi->ModelIdGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DynamicApi.ModelIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<QueryFilterResponse>("/{model}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an entity Update an existing entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        public QueryFilterResponse UpdateById(string model, string id, QueryEntityWithRelations entity, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = ModelIdPutWithHttpInfo(model, id, entity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an entity Update an existing entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> ModelIdPutWithHttpInfo(string model, string id, QueryEntityWithRelations entity, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelIdPut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling DynamicApi->ModelIdPut");
            }

            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entity' when calling DynamicApi->ModelIdPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = entity;

            localVarRequestOptions.Operation = "DynamicApi.ModelIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<QueryFilterResponse>("/{model}/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an entity Update an existing entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        public async System.Threading.Tasks.Task<QueryFilterResponse> ModelIdPutAsync(string model, string id, QueryEntityWithRelations entity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = await ModelIdPutWithHttpInfoAsync(model, id, entity, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an entity Update an existing entity by its ID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="id">Entity ID</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse>> ModelIdPutWithHttpInfoAsync(string model, string id, QueryEntityWithRelations entity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelIdPut");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling DynamicApi->ModelIdPut");
            }

            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entity' when calling DynamicApi->ModelIdPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = entity;

            localVarRequestOptions.Operation = "DynamicApi.ModelIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<QueryFilterResponse>("/{model}/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new entity Create a new entity of the specified model type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>QueryFilterResponse</returns>
        public QueryFilterResponse Create(string model, QueryEntityWithRelations entity, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = ModelPostWithHttpInfo(model, entity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new entity Create a new entity of the specified model type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of QueryFilterResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> ModelPostWithHttpInfo(string model, QueryEntityWithRelations entity, int operationIndex = 0)
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelPost");
            }

            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entity' when calling DynamicApi->ModelPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = entity;

            localVarRequestOptions.Operation = "DynamicApi.ModelPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<QueryFilterResponse>("/{model}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new entity Create a new entity of the specified model type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QueryFilterResponse</returns>
        public async System.Threading.Tasks.Task<QueryFilterResponse> ModelPostAsync(string model, QueryEntityWithRelations entity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse> localVarResponse = await ModelPostWithHttpInfoAsync(model, entity, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new entity Create a new entity of the specified model type
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="model">Model Name</param>
        /// <param name="entity">Entity Data</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QueryFilterResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<QueryFilterResponse>> ModelPostWithHttpInfoAsync(string model, QueryEntityWithRelations entity, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'model' is set
            if (model == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'model' when calling DynamicApi->ModelPost");
            }

            // verify the required parameter 'entity' is set
            if (entity == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'entity' when calling DynamicApi->ModelPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("model", Org.OpenAPITools.Client.ClientUtils.ParameterToString(model)); // path parameter
            localVarRequestOptions.Data = entity;

            localVarRequestOptions.Operation = "DynamicApi.ModelPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<QueryFilterResponse>("/{model}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ModelPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
