/*
 * CrudSQL API
 *
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models CrudSQL provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: taqi@mobix.biz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Paginated response containing filtered entities and metadata Used for both simple list operations and complex filtered queries
    /// </summary>
    [DataContract(Name = "query.FilterResponse")]
    public partial class QueryFilterResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueryFilterResponse" /> class.
        /// </summary>
        /// <param name="data">@Description Array of entities matching the filter conditions @Description For relationship queries, includes related entities based on the filter.</param>
        /// <param name="page">@Description Current page number (1-based indexing) @Description Example: page&#x3D;2 returns the second page of results.</param>
        /// <param name="pageSize">@Description Number of items per page (default may vary) @Description Example: page_size&#x3D;20 returns 20 items per page.</param>
        /// <param name="total">@Description Total number of records matching the filter conditions @Description Used for calculating pagination metadata.</param>
        /// <param name="totalPages">@Description Total number of pages based on total records and page size @Description Calculated as ceil(total/page_size).</param>
        public QueryFilterResponse(Object data = default(Object), int page = default(int), int pageSize = default(int), int total = default(int), int totalPages = default(int))
        {
            this.Data = data;
            this.Page = page;
            this.PageSize = pageSize;
            this.Total = total;
            this.TotalPages = totalPages;
        }

        /// <summary>
        /// @Description Array of entities matching the filter conditions @Description For relationship queries, includes related entities based on the filter
        /// </summary>
        /// <value>@Description Array of entities matching the filter conditions @Description For relationship queries, includes related entities based on the filter</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public Object Data { get; set; }

        /// <summary>
        /// @Description Current page number (1-based indexing) @Description Example: page&#x3D;2 returns the second page of results
        /// </summary>
        /// <value>@Description Current page number (1-based indexing) @Description Example: page&#x3D;2 returns the second page of results</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public int Page { get; set; }

        /// <summary>
        /// @Description Number of items per page (default may vary) @Description Example: page_size&#x3D;20 returns 20 items per page
        /// </summary>
        /// <value>@Description Number of items per page (default may vary) @Description Example: page_size&#x3D;20 returns 20 items per page</value>
        [DataMember(Name = "page_size", EmitDefaultValue = false)]
        public int PageSize { get; set; }

        /// <summary>
        /// @Description Total number of records matching the filter conditions @Description Used for calculating pagination metadata
        /// </summary>
        /// <value>@Description Total number of records matching the filter conditions @Description Used for calculating pagination metadata</value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public int Total { get; set; }

        /// <summary>
        /// @Description Total number of pages based on total records and page size @Description Calculated as ceil(total/page_size)
        /// </summary>
        /// <value>@Description Total number of pages based on total records and page size @Description Calculated as ceil(total/page_size)</value>
        [DataMember(Name = "total_pages", EmitDefaultValue = false)]
        public int TotalPages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueryFilterResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
