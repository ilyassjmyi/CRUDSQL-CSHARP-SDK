/*
 * CrudSQL API
 *
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models CrudSQL provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: taqi@mobix.biz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Schema information for a model including fields and relationships
    /// </summary>
    [DataContract(Name = "api.ModelSchema")]
    public partial class ApiModelSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiModelSchema" /> class.
        /// </summary>
        /// <param name="fields">Fields contains information about each field in the model.</param>
        /// <param name="relationships">Relationships contains information about model relationships.</param>
        public ApiModelSchema(List<ApiFieldSchema> fields = default(List<ApiFieldSchema>), List<ApiRelationshipSchema> relationships = default(List<ApiRelationshipSchema>))
        {
            this.Fields = fields;
            this.Relationships = relationships;
        }

        /// <summary>
        /// Fields contains information about each field in the model
        /// </summary>
        /// <value>Fields contains information about each field in the model</value>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public List<ApiFieldSchema> Fields { get; set; }

        /// <summary>
        /// Relationships contains information about model relationships
        /// </summary>
        /// <value>Relationships contains information about model relationships</value>
        [DataMember(Name = "relationships", EmitDefaultValue = false)]
        public List<ApiRelationshipSchema> Relationships { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiModelSchema {\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
