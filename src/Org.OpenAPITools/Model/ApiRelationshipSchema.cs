/*
 * CrudSQL API
 *
 * A powerful dynamic CRUD API engine that automatically generates RESTful endpoints for your data models CrudSQL provides automatic CRUD operations, filtering, pagination, and sorting capabilities for any data model. Features: - Automatic REST API generation - Dynamic model support - Complex filtering and querying - Pagination and sorting - Swagger documentation - Multiple database support (SQL & NoSQL)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: taqi@mobix.biz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Schema information for a model relationship
    /// </summary>
    [DataContract(Name = "api.RelationshipSchema")]
    public partial class ApiRelationshipSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiRelationshipSchema" /> class.
        /// </summary>
        /// <param name="name">Name of the relationship.</param>
        /// <param name="relatedModel">Name of the related model.</param>
        /// <param name="type">Type of relationship (hasOne, hasMany).</param>
        public ApiRelationshipSchema(string name = default(string), string relatedModel = default(string), string type = default(string))
        {
            this.Name = name;
            this.RelatedModel = relatedModel;
            this.Type = type;
        }

        /// <summary>
        /// Name of the relationship
        /// </summary>
        /// <value>Name of the relationship</value>
        /*
        <example>Posts</example>
        */
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Name of the related model
        /// </summary>
        /// <value>Name of the related model</value>
        /*
        <example>Post</example>
        */
        [DataMember(Name = "relatedModel", EmitDefaultValue = false)]
        public string RelatedModel { get; set; }

        /// <summary>
        /// Type of relationship (hasOne, hasMany)
        /// </summary>
        /// <value>Type of relationship (hasOne, hasMany)</value>
        /*
        <example>hasMany</example>
        */
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiRelationshipSchema {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RelatedModel: ").Append(RelatedModel).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
